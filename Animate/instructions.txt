FramePack Studio API quick reference for listing models and rendering clips with fixed start/end frames.

Prerequisites
1. Launch FramePack Studio locally (Pinokio shows the port, e.g. http://127.0.0.1:7860) and keep it running.
2. Install the client once: pip install gradio-client

Connecting
- from gradio_client import Client, handle_file
- client = Client("http://127.0.0.1:7860", download_files="downloads")
  * download_files is optional; when supplied, FramePack outputs are auto-downloaded into that directory.

Discovering available models
- FramePack exposes the generation model selector as the first input of /handle_start_button. Use client.view_api(return_format="dict") to inspect it.

from gradio_client import Client

client = Client("http://127.0.0.1:7860")
api_schema = client.view_api(return_format="dict")
start_endpoint = api_schema["/handle_start_button"]
model_selector = start_endpoint["inputs"][0]
print(model_selector["label"], model_selector["choices"])

Typical choices currently returned are ["Original", "F1"]. When Studio updates, rerun the snippet to refresh the list.
As of the latest schema dump, `/handle_start_button` reports these models:
- Original
- Original with Endframe
- F1
- Video
- Video with Endframe
- Video F1

Pick `Original with Endframe` when you are supplying both start and end framesâ€”the variant is configured to respect the end-frame blend pipeline.

Submitting a fixed-frame job
- /handle_start_button expects positional arguments. The key entries for fixed frames are:
  1. Generation Type (model name from the choices above)
  2. Start Frame (handle_file path or None)
  3. Video Input (None for image-driven runs)
  4. End Frame (handle_file path or None)
  5. End Frame Influence (float 0.0 - 1.0)
- Keep remaining parameters aligned with the defaults FramePack reports. Explicitly pass values you care about to avoid positional drift.

Example run with a fixed start frame and fixed end frame:

from pathlib import Path
from gradio_client import Client, handle_file

client = Client("http://127.0.0.1:7860", download_files="downloads")
model_name = "Original with Endframe"  # confirm via client.view_api()
start_frame = handle_file("assets/start.png")
end_frame = handle_file("assets/end.png")

result = client.predict(
    model_name,
    start_frame,
    None,
    end_frame,
    1.0,                         # End Frame Influence (1.0 forces final frame to match)
    "Describe the motion here",
    "",
    2500,
    False,
    6,
    9,
    25,
    1.0,
    10.0,
    0.0,
    "MagCache",
    25,
    0.15,
    0.1,
    2,
    0.25,
    4,
    "Noise",
    True,
    [],
    640,
    640,
    False,
    5,
    api_name="/handle_start_button",
)

job_id = result[1]
if not job_id:
    raise RuntimeError("FramePack Studio did not return a job id")

Notes on the fixed frames
- Start Frame anchors the first rendered frame. Provide a clean still image that matches the target composition.
- End Frame pulls the sequence toward the supplied still. Use End Frame Influence < 1.0 if you want the animation to approach but not exactly match the end frame.
- Omit either frame by passing None to fall back to latent-only generation or start-only runs.

Monitoring completion

import time

poll = client.predict(job_id, api_name="/monitor_job")
status = str(poll[3]).lower()
while "completed" not in status:
    if "failed" in status or "error" in status:
        raise RuntimeError(f"FramePack job {job_id} failed: {poll}")
    time.sleep(5)
    poll = client.predict(job_id, api_name="/monitor_job")
    status = str(poll[3]).lower()

video_info = poll[0]

Retrieving the clip
- When using download_files="downloads", the MP4 lands in downloads/<hash>/file=<remote_path>. Copy or rename it for later use.
- If auto-download is disabled or the file is missing, manually GET `<client.src>/file=<urllib.parse.quote(remote_path)>` (import quote via `from urllib.parse import quote`).

Keep in mind
- client.view_api() is your source of truth for parameter order and defaults; rerun it whenever FramePack Studio updates.
- FramePack Studio must stay running until monitoring reports "Completed".
